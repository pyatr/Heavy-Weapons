using System;
using XRL.Rules;
using XRL.UI;
using XRL.Core;
using XRL.Messages;
using XRL.World.Parts.Effects;

namespace XRL.World.Parts
{
    [Serializable]
    public class HW_DeployWeapon : IPart
    {
        public Guid DeployActivatedAbilityID = Guid.Empty;
        public ActivatedAbilityEntry DeployActivatedAbility
        {
            get
            {
                if (this.owner == null)
                    return (ActivatedAbilityEntry)null;
                ActivatedAbilities part = this.owner.GetPart<ActivatedAbilities>();
                if (part == null)
                    return (ActivatedAbilityEntry)null;
                ActivatedAbilityEntry activatedAbilityEntry;
                if (part.AbilityByGuid.TryGetValue(this.DeployActivatedAbilityID, out activatedAbilityEntry))
                    return activatedAbilityEntry;
                return (ActivatedAbilityEntry)null;
            }
            set
            {
            }
        }

        public Guid UndeployActivatedAbilityID = Guid.Empty;
        public ActivatedAbilityEntry UndeployActivatedAbility
        {
            get
            {
                if (this.owner == null)
                    return (ActivatedAbilityEntry)null;
                ActivatedAbilities part = this.owner.GetPart<ActivatedAbilities>();
                if (part == null)
                    return (ActivatedAbilityEntry)null;
                ActivatedAbilityEntry activatedAbilityEntry;
                if (part.AbilityByGuid.TryGetValue(this.UndeployActivatedAbilityID, out activatedAbilityEntry))
                    return activatedAbilityEntry;
                return (ActivatedAbilityEntry)null;
            }
            set
            {
            }
        }
        public bool bDeployed = false;
        public GameObject owner; //Because at Unequipped event after the very start owner can't be referred to with this.ParentObject.pPhysics.Equipped
        public int DeploymentAccuracyBonus;

        public HW_DeployWeapon() {}

        public override bool SameAs(IPart p)
        {
            return true;
        }

        public override void Register(GameObject Object)
        {
            Object.RegisterPartEvent((IPart)this, "Equipped");
            Object.RegisterPartEvent((IPart)this, "Unequipped");
            Object.RegisterPartEvent((IPart)this, "CommandDeployWeapon");
            Object.RegisterPartEvent((IPart)this, "CommandUndeployWeapon");
        }

        public void DeployWeapon()
        {
            this.bDeployed = true;
            this.DeployActivatedAbility.Enabled = false;
            this.UndeployActivatedAbility.Enabled = true;
            owner.ApplyEffect(new HW_Deployed(DeploymentAccuracyBonus));
            owner.UseEnergy(1000);
            if (owner.IsPlayer())
            {
                MessageQueue.AddPlayerMessage("You deploy your weapon and lie down.");
            }
        }

        public void UndeployWeapon()
        {
            this.bDeployed = false;
            this.DeployActivatedAbility.Enabled = true;
            this.UndeployActivatedAbility.Enabled = false;
            owner.RemoveEffect("HW_Deployed");
            owner.UseEnergy(1000);
            if (owner.IsPlayer())
            {
                MessageQueue.AddPlayerMessage("You undeploy your weapon and get up.");
            }
        }

        public override bool FireEvent(Event E)
        {
            if (E.ID == "CommandDeployWeapon")
            {
                this.DeployWeapon();
                return true;
            }

            if (E.ID == "CommandUndeployWeapon")
            {
                this.UndeployWeapon();
                return true;
            }

            if (E.ID == "Equipped")
            {
                owner = this.ParentObject.pPhysics.Equipped;
                this.bDeployed = false;
                GameObject go = E.GetParameter<GameObject>("EquippingObject");
                if (go.HasPart("HeavyWeapons"))
                {
                    go.RegisterPartEvent(this, "CommandDeployWeapon");
                    go.RegisterPartEvent(this, "CommandUndeployWeapon");
                    ActivatedAbilities pAA = go.GetPart<ActivatedAbilities>();
                    if (pAA != null)
                    {
                        this.DeployActivatedAbilityID = pAA.AddAbility("Deploy weapon", "CommandDeployWeapon", "Tactics");
                        this.DeployActivatedAbility = pAA.AbilityByGuid[this.DeployActivatedAbilityID];
                        this.DeployActivatedAbility.Enabled = true;
                        this.UndeployActivatedAbilityID = pAA.AddAbility("Undeploy weapon", "CommandUndeployWeapon", "Tactics");
                        this.UndeployActivatedAbility = pAA.AbilityByGuid[this.UndeployActivatedAbilityID];
                        this.UndeployActivatedAbility.Enabled = false;
                    }
                }
                return true;
            }

            if (E.ID == "Unequipped")
            {
                //MessageQueue.AddPlayerMessage("This gun is not owned by " + owner.DisplayName + " anymore.");
                if (this.bDeployed == true)
                {
                    this.UndeployWeapon();
                }
                owner = null;

                GameObject go = E.GetParameter<GameObject>("UnequippingObject");
                go.UnregisterPartEvent(this, "CommandDeployWeapon");
                go.UnregisterPartEvent(this, "CommandUndeployWeapon");
                if (this.DeployActivatedAbilityID != Guid.Empty && this.UndeployActivatedAbilityID != Guid.Empty)
                {
                    ActivatedAbilities pAA = go.GetPart<ActivatedAbilities>();
                    pAA.RemoveAbility(this.DeployActivatedAbilityID);
                    this.DeployActivatedAbilityID = Guid.Empty;
                    pAA.RemoveAbility(this.UndeployActivatedAbilityID);
                    this.UndeployActivatedAbilityID = Guid.Empty;
                }
                return true;
            }
            return true;
        }
    }
}